// -----------------------------------------------------------------------------
//  Copyright (c) 2016 Microelectronics Lab. FIUBA.
//  All Rights Reserved.
//
//  The information contained in this file is confidential and proprietary.
//  Any reproduction, use or disclosure, in whole or in part, of this
//  program, including any attempt to obtain a human-readable version of this
//  program, without the express, prior written consent of Microelectronics Lab.
//  FIUBA is strictly prohibited.
//
// -----------------------------------------------------------------------------
// Description:
// ------------
//
// Basic test for csd2bin block.
//
// -----------------------------------------------------------------------------
// File name:
// ----------
//
// basic_test.v
//
// -----------------------------------------------------------------------------
// History:
// --------
//
//    - 2016-04-18 - ilesser - Original version.
//
// -----------------------------------------------------------------------------


// *****************************************************************************
// Interface
// *****************************************************************************
task basic_test;
// *****************************************************************************

// *****************************************************************************
// Functionality
// *****************************************************************************

   // -----------------------------------------------------
   // Internal variables and signals
   // -----------------------------------------------------
   // -----------------------------------------------------

   begin

      $monitor ("Time = %8t tb_x = %b \twire_y = %b \n\t\t\t\t\tres    = %b\n\n",$time, tb_x, wire_y, res);
      $dumpfile("../waves/tb_csd2bin_basic_test.vcd");
      $dumpvars();
      load_operands(10'b0000000000, 5'b00000);  // res = 0
      load_operands(10'b0000000001, 5'b00001);  // res = 1
      load_operands(10'b0000000100, 5'b00010);  // res = 2
      load_operands(10'b0000010010, 5'b00011);  // res = 3 = 4 - 1
      load_operands(10'b0000010000, 5'b00100);  // res = 4
      load_operands(10'b0000010001, 5'b00101);  // res = 5
      load_operands(10'b0001001000, 5'b00110);  // res = 6 = 8 - 2
      load_operands(10'b0001000010, 5'b00111);  // res = 7 = 8 - 1
      load_operands(10'b0001000000, 5'b01000);  // res = 8
      load_operands(10'b0000000010, 5'b11111);  // res =-1
      load_operands(10'b0000001000, 5'b11110);  // res =-2
      load_operands(10'b0000100000, 5'b11100);  // res =-4
      load_operands(10'b0010000000, 5'b11000);  // res =-8
      load_operands(10'b1000000000, 5'b10000);  // res =-16
      load_operands(10'b0010000010, 5'b10111);  // res =-9 =-8-1
      load_operands(10'b0000010010, 5'b00011);  // res = 3 =-4+1
      load_operands(10'b0100100010, 5'b01011);  // res = 11 = 16-4-1

   end

// *****************************************************************************

endtask

// *****************************************************************************
// Interface
// *****************************************************************************
task load_operands;
// *****************************************************************************

// *****************************************************************************
// Functionality
// *****************************************************************************

   // -----------------------------------------------------
   // Internal variables and signals
   // -----------------------------------------------------
   input [2*W-1:0]   x;
   input [W-1:0]     y;
   // -----------------------------------------------------

   begin

      tb_x  = x;
      res   = y;
      #1

      if (wire_y != y) begin
         `ERR_MSG2(\tExpected result: %b\n\t\tObtained result: %b\t\t, y, wire_y);
         $display("");
      end

   end

// *****************************************************************************

endtask


