#!/bin/bash
#####################################################################################
#
# Copyright (c) 2014 Microelectronics Lab. FIUBA.
# Copyright (c) 2014 uLab UTN-FRBA.
# All Rights Reserved.
#
# The information contained in this file is confidential and proprietary.
# Any reproduction, use or disclosure, in whole or in part, of this
# program, including any attempt to obtain a human-readable version of this
# program, without the express, prior written consent of Microelectronics Lab.
# FIUBA and uLab UTN-FRBA is strictly prohibited.
#
#####################################################################################
#
# File name:
# ----------
#
# run_sim_local
#
#####################################################################################
#
# History:
# --------
#
#  Jun. 14, 2014 - oalpago - First release
#
#####################################################################################
#
# Description:
# ------------
#
# Simulation script.
#
#####################################################################################
#
# To do:
# ------
#
# 1- Iverilog support.
# 2- Coverage support.
# 3- Gate level sim.
#
#####################################################################################

for (( i=1; i<=100; i++ ))
do
   echo ""
done

echo "##########################################################################################"
echo "#                                                                                        #"
echo "#                                   Simulation Script                                    #"
echo "#                                                                                        #"
echo "##########################################################################################"
echo "#                                                                                        #"
echo "#  Microelectronics Lab. - FIUBA                                                         #"
echo "#  uLab - UTN-FRBA                                                                       #"
echo "#  Version 1.0                                                                           #"
echo "#  Jun. 14, 2014                                                                         #"
echo "#                                                                                        #"
echo "##########################################################################################"
echo ""
echo ""
echo ""

# Whitespace trimming function
trim() { echo $1; }

# -----------------------------
# Get institution
# -----------------------------
if [ -f ../../../../docs/proj_info.txt ]; then
   fline=`grep "Institution       :" ../../../../docs/proj_info.txt`
   institution=`echo ${fline} | gawk '{print $(NF-0)}' FS=":"`
   institution=`echo ${institution} | tr -d ' '`
fi
# -----------------------------

if [ ${institution} == "FIUBA" ]; then
   simlib_path="/usr/repos/ip_library/simlib"
fi
if [ ${institution} == "UTN-FRBA" ]; then
   simlib_path=""
fi

# Default values
test_name=""
waves="yes"
rseed=$(trim "$(od -N4 -An -tu4 /dev/urandom)")  # Generate a random number from urandom device
model="rtl"
delay="max"
verbosity="low"
tool="vcs"
wv_format="vcd"
path=`pwd`
block_name=`echo ${path} | gawk '{print $(NF-0)}' FS="/"`
command_sintax="Usage:
------
./run_sim TEST=<test_name>
          [WAVES=<yes|no>]
          [TESTSEED=<seed>]
          [MODEL=<rtl|gate>]
          [DELAY=<min/max>]
          [VERBOSITY=<low|mid|high>]
          [TOOL=<modelsim|iverilog|vcs|irun>]
          [WAVES_FORMAT=<vcd|wlf|lxt|vpd|shm>]
"

if [ $# == 0 ] || [ $1 == "-help" ]; then
   echo "${command_sintax}"
   echo ""
   echo ""
   echo "Default values:"
   echo "---------------"
   echo "WAVES                   : ${waves}"
   echo "TESTSEED                : random positive integer"
   echo "MODEL                   : ${model}"
   echo "DELAY                   : ${delay} (for gate level only)"
   echo "VERBOSITY               : ${verbosity}"
   echo "TOOL                    : ${tool}"
   echo "WAVES_FORMAT            : ${wv_format}"
   echo ""
   echo ""
   echo "Notes:"
   echo "------"
   echo "   1. WAVES_FORMAT is ${wv_format} by default. However, for Modelsim"
   echo "      \"wlf\" can be generated, for Iverilog \"lxt\" can be"
   echo "      generated, and for VCS \"vpd\" can be generated."
   echo "   2. TESTSEED must be a positive integer."
   echo ""
   echo ""
   echo "Available tests:"
   echo "----------------"
   temp_list=`ls ./tests/ | sed -e 's/\.[a-zA-Z]*$//'`
   for b in ${temp_list}
   do
      if [ ${b} != "vfg" ]; then
         echo "    ${b}"
      fi
   done
   echo ""
   echo "Available input files:"
   echo "---------------------"
   inputs_list=`ls ./inputs/`
   for b in ${inputs_list}
   do
      echo "    ${b}"
   done
   echo ""
   echo ""
   exit
fi

# ------------------------------------------------------------
# Get input arguments
# ------------------------------------------------------------
for ARG in "$@"
do
   cmd=`echo ${ARG} | awk -F= '{print $1}' | tr '[a-z]' '[A-Z]'`
   value=`echo ${ARG} | awk -F= '{print $2}' | tr '[A-Z]' '[a-z]'`
   case $cmd in
      "TEST")
         test_name=${value}
      ;;
      "WAVES")
         waves=${value}
      ;;
      "TESTSEED")
         rseed=${value}
      ;;
      "MODEL")
         model=${value}
      ;;
      "DELAY")
         delay=${value}
      ;;
      "VERBOSITY")
         verbosity=${value}
      ;;
      "TOOL")
         tool=${value}
      ;;
      "WAVES_FORMAT")
         wv_format=${value}
      ;;
      *)
         echo "ERROR: Command '${cmd}' unknown."
         echo ""
         echo ""
         echo "${command_sintax}"
         exit
      ;;
   esac
done
# ------------------------------------------------------------

# ------------------------------------------------------------
# Verify input arguments
# ------------------------------------------------------------
# TEST validation
if [ "${test_name}" = "" ]; then
   echo "ERROR: You must specify a test."
   echo ""
   echo ""
   echo "${command_sintax}"
   exit
fi

# WAVES validation
if [ "${waves}" == "yes"  ]; then
   wlf_waves="../waves/${block_name}.wlf"
   vcd_waves="../waves/${block_name}.vcd"
   shm_waves="../waves/${block_name}.shm"
   vpd_waves="../waves/${block_name}.vpd"
else
   if [ "${waves}" != "no"  ]; then
      echo "ERROR: WAVES not valid."
      echo ""
      echo ""
      echo "${command_sintax}"
      exit
   else
      vcd_waves=""
   fi
fi

# TESTSEED validation
test_val=`echo ${rseed} | grep "[^0-9]"`
if [ ${test_val} ]; then
   echo "ERROR: TESTSEED is not a positive integer."
   echo ""
   echo ""
   echo "${command_sintax}"
   exit
fi

# MODEL and DELAY validation
model_define=""
case ${model} in
   "rtl")
      iverilog_defines="-D RTL_DEBUG"
      modelsim_defines="+define+RTL_DEBUG"
      vcs_defines="XXXXXXX"
      irun_defines="-define RTL_DEBUG"
   ;;
   "gate")
      iverilog_defines="-D GTLVL_DEBUG"
      modelsim_defines="+define+GTLVL_DEBUG"
      vcs_defines="XXXXXXXX"
      irun_defines="-define GTLVL_DEBUG"
      if [ "${delay}" != "max" ] && [ "${delay}" != "min" ]; then
         echo "ERROR: DELAY not Valid."
         echo ""
         echo ""
         echo "${command_sintax}"
         exit
      fi
#       if [ "$delay" == "max"  ] ; then
#          XXXXXXXX
#       fi
#       if [ "$delay" == "min"  ] ; then
#          XXXXXXXX
#       fi
   ;;
   *)
      echo "ERROR: MODEL not valid."
      echo ""
      echo ""
      echo "${command_sintax}"
      exit
   ;;
esac

# VERBOSITY validation
if [ "${verbosity}" == "low" ]; then
   verbosity_2=0
else
   if [ "${verbosity}" == "mid" ]; then
      verbosity_2=1
   else
      if [ "${verbosity}" == "high" ]; then
         verbosity_2=2
      else
         echo "ERROR: VERBOSITY parameter not valid."
         echo ""
         echo ""
         echo "${command_sintax}"
         exit
      fi
   fi
fi

# TOOL validation
if [ "${tool}" != "modelsim"  ] && [ "${tool}" != "iverilog"  ] && [ "${tool}" != "vcs" ]  && [ "${tool}" != "irun" ] ; then
   echo "ERROR: TOOL \"${tool}\" is not valid."
   echo ""
   echo ""
   echo "${command_sintax}"
   exit
fi

# WAVES_FORMAT validation
if [ "${tool}" == "modelsim"  ]; then
   if [ "${wv_format}" != "vcd"  ] && [ "${wv_format}" != "wlf"  ]; then
      echo "ERROR: WAVES_FORMAT not valid for "${tool}" simulator."
      echo ""
      echo ""
      echo "${command_sintax}"
      exit
   fi
fi
if [ "${tool}" == "iverilog"  ]; then
   if [ "${wv_format}" != "vcd"  ] && [ "${wv_format}" != "lxt"  ]; then
      echo "ERROR: WAVES_FORMAT not valid for "${tool}" simulator."
      echo ""
      echo ""
      echo "${command_sintax}"
      exit
   fi
fi
if [ "${tool}" == "vcs"  ]; then
   if [ "${wv_format}" != "vcd"  ] && [ "${wv_format}" != "vpd"  ]; then
      echo "ERROR: WAVES_FORMAT not valid for "${tool}" simulator."
      echo ""
      echo ""
      echo "${command_sintax}"
      exit
   fi
fi
if [ "${tool}" == "irun"  ]; then
   if [ "${wv_format}" != "vcd"  ] && [ "${wv_format}" != "shm"  ]; then
      echo "ERROR: WAVES_FORMAT not valid for "${tool}" simulator."
      echo ""
      echo ""
      echo "${command_sintax}"
      exit
   fi
fi
# ------------------------------------------------------------

# ------------------------------------------------------------
# Create temporal files
# ------------------------------------------------------------
if [ -d ./temp ]; then
   rm -rf ./temp
   mkdir ./temp
else
   mkdir ./temp
fi

if [ ${tool} == "modelsim" ]; then
   if [ ${waves} == "yes" ]; then
      if [ ${wv_format} == "wlf" ]; then
         echo "log -r /*" > ./temp/vsim.tcl
         echo "run -all"  >> ./temp/vsim.tcl
         echo "quit -f"   >> ./temp/vsim.tcl
      fi
      if [ ${wv_format} == "vcd" ]; then
         echo "vcd file ${vcd_waves}" >  ./temp/vsim.tcl
         echo "vcd add -r *" >> ./temp/vsim.tcl
         echo "run -all"     >> ./temp/vsim.tcl
         echo "quit -f"      >> ./temp/vsim.tcl
      fi
   else
      echo "run -all"  > ./temp/vsim.tcl
      echo "quit -f"   >> ./temp/vsim.tcl
   fi
fi

if [ ${tool} == "irun" ]; then
   mkdir ./temp/INCA_libs/worklib -p
   if [ ${waves} == "yes" ]; then
      if [ ${wv_format} == "shm" ]; then
         echo "database -open -shm -into ${shm_waves} ${test_name} -default" > ./temp/ncsim.tcl
         echo "probe -create -shm -database ${test_name} -memories -all -tasks -functions -depth all" >> ./temp/ncsim.tcl
      fi
      if [ ${wv_format} == "vcd" ]; then
         echo "database -open -vcd -into ${vcd_waves} ${test_name} -default" > ./temp/ncsim.tcl
         echo "probe -create -vcd -database ${test_name} -memories -all -tasks -functions -depth all" >> ./temp/ncsim.tcl
      fi
   fi
   echo "run" >> ./temp/ncsim.tcl
   echo "exit" >> ./temp/ncsim.tcl
   echo "define WORK       worklib" > ./temp/hdl.var
   echo "define std        /opt/cds/INCISIV/tools.lnx86/inca/files/STD" >> ./temp/hdl.var
   echo "define ieee       /opt/cds/INCISIV/tools.lnx86/inca/files/IEEE" >> ./temp/hdl.var
   echo "define synopsys   /opt/cds/INCISIV/tools.lnx86/inca/files/SYNOPSYS" >> ./temp/hdl.var
   echo "DEFINE worklib    ../temp/INCA_libs/worklib" > ./temp/cds.lib
fi

if [ ${tool} == "vcs" ]; then
   if [ ${waves} == "yes" ]; then
      if [ ${wv_format} == "vpd" ]; then
         echo "dump  -add / -aggregates -depth 0" > ./temp/simv.tcl
      fi
      if [ ${wv_format} == "vcd" ]; then
echo "arreglar VCD for VCS!!!!."
 #        echo "database -open -vcd -into ${vcd_waves} ${test_name} -default" > ./temp/ncsim.tcl
 #        echo "probe -create -vcd -database ${test_name} -memories -all -tasks -functions -depth all" >> ./temp/ncsim.tcl
      fi
   fi
   echo "run" >> ./temp/simv.tcl
   echo "quit" >> ./temp/simv.tcl
fi

if [ -f ./tb/tb_${block_name}.v ]; then
   sed -s "s@endmodule@@" ./tb/tb_${block_name}.v > ./temp/tb_${block_name}.v
else
   echo "ERROR: Testbench file \"./tb/tb_${block_name}.v\" missing."
   echo ""
   echo ""
   rm -rf ./temp
   exit
fi

simdefs_list=`ls ${simlib_path}`
for d in ${simdefs_list}
do
   extension=`echo ${d} | cut -d '.' -f2`
   if [ "${extension}" = "vh" ]; then
      cat ${simlib_path}/${d} >> ./temp/tb_${block_name}.v
   fi
done

tasks_list_v=`find ./tests/ -type f -name "*_task.v"`

echo "" >> ./temp/tb_${block_name}.v
cat ./tests/${test_name}.v >> ./temp/tb_${block_name}.v

for f in ${tasks_list_v}
do
   if [ -f ${f} ]; then
      cat ${f} >> ./temp/tb_${block_name}.v
   fi
done

echo "" >> ./temp/tb_$block_name.v
echo "   initial begin" >> ./temp/tb_${block_name}.v
echo "      ${test_name}();" >> ./temp/tb_${block_name}.v
echo "      finish_sim();" >> ./temp/tb_${block_name}.v
echo "   end" >> ./temp/tb_${block_name}.v
echo "" >> ./temp/tb_${block_name}.v
echo "endmodule" >> ./temp/tb_${block_name}.v
echo "" >> ./temp/tb_${block_name}.v

simlib_list_v=`find ${simlib_path} -type f -name "*.v"`
simlib_list_vh=`find ${simlib_path} -type f -name "*.vh"`
source_list_v=`find ../../rtl/source/ -type f -name "*.v"`
source_list_vh=`find ../../rtl/source/ -type f -name "*.vh"`
checkers_list_v=`find ./checkers/ -type f -name "*.v"`
checkers_list_vh=`find ./checkers/ -type f -name "*.vh"`
monitors_list_v=`find ./monitors/ -type f -name "*.v"`
monitors_list_vh=`find ./monitors/ -type f -name "*.vh"`
transactors_list_v=`find ./transactors/ -type f -name "*.v"`
transactors_list_vh=`find ./transactors/ -type f -name "*.vh"`

for f in ${simlib_list_v}
do
   if [ -f ${f} ]; then
      cp ${f} ./temp/
   fi
done

for f in ${simlib_list_vh}
do
   if [ -f ${f} ]; then
      cp ${f} ./temp/
   fi
done

for f in ${source_list_v}
do
   if [ -f ${f} ]; then
      cp ${f} ./temp/
   fi
done

for f in ${source_list_vh}
do
   if [ -f ${f} ]; then
      cp ${f} ./temp/
   fi
done

for f in ${checkers_list_v}
do
   if [ -f ${f} ]; then
      cp ${f} ./temp/
   fi
done

for f in ${checkers_list_vh}
do
   if [ -f ${f} ]; then
      cp ${f} ./temp/
   fi
done

for f in ${monitors_list_v}
do
   if [ -f ${f} ]; then
      cp ${f} ./temp/
   fi
done

for f in ${monitors_list_vh}
do
   if [ -f ${f} ]; then
      cp ${f} ./temp/
   fi
done

for f in ${transactors_list_v}
do
   if [ -f ${f} ]; then
      cp ${f} ./temp/
   fi
done

for f in ${transactors_list_vh}
do
   if [ -f ${f} ]; then
      cp ${f} ./temp/
   fi
done

sim_period=`cat ./temp/tb_${block_name}.v | grep "define SIM_CLK_PERIOD_NS"`
sim_period=`echo ${sim_period} | cut -d ' ' -f3`

if [ ${sim_period} != "" ]; then
   default_tscale=`cat ./temp/tb_${block_name}.v | grep "timescale"`
   default_tscale=`echo ${default_tscale} | cut -d ' ' -f2`
   if [ ${default_tscale} != "" ]; then
      echo "INFO: Default timescale ${default_tscale}."
      echo ""
      echo ""
   else
      echo "ERROR: Testbench file \"./tb/tb_${block_name}.v\" must have defined timescale."
      echo ""
      echo ""
      rm -rf ./temp
      exit
   fi
else
   echo "ERROR: Testbench file \"./tb/tb_${block_name}.v\" must have defined SIM_CLK_PERIOD_NS."
   echo ""
   echo ""
   rm -rf ./temp
   exit
fi

temp_v_list=`find ./temp/ -type f -name "*.v"`
for f in ${temp_v_list}
do
   tscale=`cat ${f} | grep "timescale"`
   tscale=`echo ${tscale} | cut -d ' ' -f2`
   if [ "$tscale" != "" ]; then
      echo "" > ./temp/temp.v
      cat $f >> ./temp/temp.v
      mv ./temp/temp.v $f
   else
      echo "\`timescale ${default_tscale}" > ./temp/temp.v
      cat ${f} >> ./temp/temp.v
      mv ./temp/temp.v ${f}
   fi
done
# ------------------------------------------------------------

# ------------------------------------------------------------
# Print simulation parameters
# ------------------------------------------------------------
echo ""
echo "##########################################################################################"
echo "# DATE         : `date`"
echo "# TEST         : ${test_name}"
echo "# WAVES        : ${waves}"
echo "# TESTSEED     : ${rseed}"
echo "# MODEL        : ${model} level"
if [ ${model} == "gate" ]; then
   echo "# DELAY        : ${delay}"
fi
echo "# VERBOSITY    : ${verbosity}"
echo "# TOOL         : ${tool}"
echo "# WAVES_FORMAT : ${wv_format}"
echo "##########################################################################################"
echo ""
echo ""
echo ""
# ------------------------------------------------------------

if [ $institution == "UTN-FRBA" ]; then
   source /home/Herramientas/scripts/shell/setenv UTN-FRBA
   module load ${VCS_MODULE}
fi
if [ $institution == "FIUBA" ]; then
   source /usr/repos/scripts/shell/setenv FIUBA
fi

# ------------------------------------------------------------
# Simulate
# ------------------------------------------------------------
if [ "${tool}" == "modelsim"  ]; then
   vlib ./temp/work
   vlog \
      -work ./temp/work \
      +incdir+./temp \
      +incdir+../../../rtl/souce/ \
      ${modelsim_defines} \
      ${temp_v_list}
   cd temp
   if [ ${waves} == "yes" ] && [ ${wv_format} == "wlf" ]; then
      vsim \
         -c tb_${block_name} \
         -wlf ${wlf_waves} \
         +TESTSEED=${rseed} \
         +VERBOSITY=${verbosity_2} \
         -do ./vsim.tcl \
         -l ../reports/${block_name}.${test_name}.${rseed}.log
   else
      vsim \
         -c tb_${block_name} \
         +TESTSEED=${rseed} \
         +VERBOSITY=${verbosity_2} \
         -do ./vsim.tcl \
         -l ../reports/${block_name}.${test_name}.${rseed}.log
   fi
   cd ..
   echo ""
   echo ""
fi

if [ "${tool}" == "iverilog"  ]; then
#    iverilog \
#       -g2001 \
#       -Wall \
#       $iverilog_defines \
#       -I ./temp \
#       -I ../../../rtl/source/ \
#       $temp_v_list \
#       -o ./waves/run.out
   echo "ERROR: Iverilog tool not supported yet."
   echo ""
   echo ""
   exit
fi

if [ "${tool}" == "vcs" ]; then
   ${VCS_PATH}/bin/vcs \
      +incdir+./temp \
      +incdir+../../../rtl/source/ \
      ./${temp_v_list} \
      -l ./reports/${block_name}.${test_name}.vcs.log \
      +define+RTL_DEBUG \
      +vcs+lic+wait \
      +warn=all \
      +lint=PCWM\
      -sverilog \
      -debug
   mv csrc ./temp/
   mv simv.daidir ./temp/
   mv simv ./temp/
   cd ./temp
   ./simv \
      -ucli \
      -do simv.tcl \
      -l ../reports/${block_name}.${test_name}.simv.log \
      +TESTSEED=${rseed} \
      +VERBOSITY=${verbosity_2}
   if [ -f "inter.vpd" ]; then
      mv inter.vpd ../waves/${vpd_waves}
   fi
   cd ..
   echo ""
   echo ""
fi

if [ "${tool}" == "irun"  ]; then
   temp_v_list_2=""
   for f in ${temp_v_list}
   do
      temp_v_list_2="${temp_v_list_2} ../${f}"
   done
   cd ./temp
   irun  \
      -incdir ./ \
      -incdir ../../../rtl/source/ \
      ${temp_v_list_2} \
      -top worklib.tb_${block_name}:module \
      +fsmdebug \
      -licqueue \
      -view module \
      -verbose \
      -sv \
      -access +rwc \
      +neg_tchk \
      -nowarn CUNGL1 \
      -nowarn CUVWSP \
      -nowarn MRSTAR \
      -warnmax 100000 \
      -cdslib ./cds.lib \
      -hdlvar ./hdl.var \
      -input ./ncsim.tcl \
      -log_ncelab ../reports/${block_name}.${test_name}.ncelab.log \
      -log_ncsim  ../reports/${block_name}.${test_name}.ncsim.log \
      -log_ncvhdl ../reports/${block_name}.${test_name}.ncvhdl.log \
      -log_ncvlog ../reports/${block_name}.${test_name}.ncvlog.log \
      -l          ../reports/${block_name}.${test_name}.irun.log \
      +TESTSEED=${rseed} \
      +VERBOSITY=${verbosity_2}
   cd ..
   echo ""
   echo ""
   if [ -d INCA_libs ]; then
      rm -rf INCA_libs
   fi
fi
# ------------------------------------------------------------
