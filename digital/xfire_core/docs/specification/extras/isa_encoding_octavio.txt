Instruction formats
===================


        31   30   29   28   27   26   25   24   23   22   21   20   19   18   17   16   15   14   13   12   11   10   09   08   07   06   05   04   03   02   01   00
      +---------+---------+-------------------------------------------------------------------------------------------------------------------------------------------+
0     | Type 2  |  OPC 2  |                                                             DIS 28                                                                        |
      +---------+---------+-------------------------------------------------------------------------------------------------------------------------------------------+




        31   30   29   28   27   26   25   24   23   22   21   20   19   18   17   16   15   14   13   12   11   10   09   08   07   06   05   04   03   02   01   00
      +---------+-------------------+------------------------+--------------------------------------------------------------------------------------------------------+
1A-1  | Type 2  |       OPC 4       |          RX 5  (src)   |                                            DIS 21                                                      |
      +---------+-------------------+------------------------+--------------------------------------------------------------------------------------------------------+




        31   30   29   28   27   26   25   24   23   22   21   20   19   18   17   16   15   14   13   12   11   10   09   08   07   06   05   04   03   02   01   00
      +---------+-------------------+------------------------+------------------------+-------------------------------------------------------------------------------+
1A-2  | Type 2  |       OPC 4       | ///////////////////////|          RY 5  (dst)   |                   DIS 16                                                      |
      +---------+-------------------+------------------------+------------------------+-------------------------------------------------------------------------------+




        31   30   29   28   27   26   25   24   23   22   21   20   19   18   17   16   15   14   13   12   11   10   09   08   07   06   05   04   03   02   01   00
      +---------+-------------------+------------------------+-------------------+------------------------------------------------------------------------------------+
1A-3  | Type 2  |       OPC 4       |          RX 5  (src)   |       SOPC 4      |                                     DIS 17                                         |
      +---------+-------------------+------------------------+-------------------+------------------------------------------------------------------------------------+




        31   30   29   28   27   26   25   24   23   22   21   20   19   18   17   16   15   14   13   12   11   10   09   08   07   06   05   04   03   02   01   00
      +---------+-------------------+------------------------+------------------------+-------------------------------------------------------------------------------+
1B    | Type 2  |       OPC 4       |/////////////////////// |          RY 5  (dst)   |                                IMM 16                                         |
      +---------+-------------------+------------------------+------------------------+-------------------------------------------------------------------------------+




        31   30   29   28   27   26   25   24   23   22   21   20   19   18   17   16   15   14   13   12   11   10   09   08   07   06   05   04   03   02   01   00
      +---------+-------------------+------------------------+------------------------+------------------------+---------+------------------------+-------------------+
2A    | Type 2  |       OPC 4       |          RX 5  (src)   |          RY 5  (dst)   |////////////////////////| SIZE 2  |         SOPC 5         |///////////////////|
      +---------+-------------------+------------------------+------------------------+------------------------+---------+------------------------+-------------------+




        31   30   29   28   27   26   25   24   23   22   21   20   19   18   17   16   15   14   13   12   11   10   09   08   07   06   05   04   03   02   01   00
      +---------+-------------------+------------------------+------------------------+-------------------------------------------------------------------------------+
2B    | Type 2  |       OPC 4       |          RX 5  (src)   |          RY 5  (dst)   |                                    DIS 16                                     |
      +---------+-------------------+------------------------+------------------------+-------------------------------------------------------------------------------+




        31   30   29   28   27   26   25   24   23   22   21   20   19   18   17   16   15   14   13   12   11   10   09   08   07   06   05   04   03   02   01   00
      +---------+-------------------+------------------------+------------------------+---------+--------------+------------------------------------------------------+
2C    | Type 2  |       OPC 4       |          RX 5  (src)   |          RY 5  (dst)   |  SOPC 2 |     NIB 3    |//////////////////////////////////////////////////////|
      +---------+-------------------+------------------------+------------------------+---------+--------------+------------------------------------------------------+




        31   30   29   28   27   26   25   24   23   22   21   20   19   18   17   16   15   14   13   12   11   10   09   08   07   06   05   04   03   02   01   00
      +---------+-------------------+------------------------+------------------------+------------------------+---------+------------------------+-------------------+
3     | Type 3  |///////////////////|          RX 5  (src)   |          RY 5  (dst)   |          RZ 5  (src)   | SIZE 2  |         SOPC 5         |///////////////////|
      +---------+-------------------+------------------------+------------------------+------------------------+---------+------------------------+-------------------+







Instruction encoding
====================



          +------------+----------------------------+----------------------+----------------------------------------+------------------------------------------------+--------------------------------------+---------------------------------------------+--------------------
Type 0    | Mnemonic   | ALU op                     | Full mnemonic        | Encoding                               | Assembler validations                          | CPU Validations                      | Description                                 | Notes
          |            |                            |                      +------+----+----------------------------+                                                |                                      |                                             |
          |            |                            |                      | Type | Op | Data                       |                                                |                                      |                                             |
          |            |                            |                      | 2    | 2  | 28                         |                                                |                                      |                                             |
          +------------+----------------------------+----------------------+------+----+----------------------------+------------------------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | j          | add (PC + Disp)            | j          DIS       |  00  | 00 | dddddddddddddddddddddddddd | DIS range: -134217728:134217727                | NONE                                 | Jump to PC + Displacement                   |
          | trap       | nop                        | trap                 |  00  | 01 | ////////////////////////// |                                                | NONE                                 | Software exception                          |
          | rfe        | nop                        | rfe                  |  00  | 10 | ////////////////////////// |                                                | NONE                                 | Return from excpeption                      |
          +------------+----------------------------+----------------------+------+----+----------------------------+------------------------------------------------+--------------------------------------+---------------------------------------------+--------------------



          +------------+----------------------------+----------------------+------------------------------------------------+----------------------------------------+--------------------------------------+---------------------------------------------+--------------------
Type 1A-1 | Mnemonic   | ALU op                     | Full mnemonic        | Encoding                                       | Assembler validations                  | CPU Validations                      | Description                                 | Notes
          |            |                            |                      +------+------+----------+-----------------------+                                        |                                      |                                             |
          |            |                            |                      | Type | Op   | RX (src) | Data                  |                                        |                                      |                                             |
          |            |                            |                      | 2    | 4    | 5        | 21                    |                                        |                                      |                                             |
          +------------+----------------------------+----------------------+------+------+----------+-----------------------+----------------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | jr         | add (Rx + Disp)            | jr         rx,DIS    | 01   | 0000 | XXXXX    | ddddddddddddddddddddd | DIS range: -1048576:1048575            |                                      | Jump to address in register                 | PC <-- Rx o PC <-- Rx + Disp ????
          +------------+----------------------------+----------------------+------+------+----------+-----------------------+----------------------------------------+--------------------------------------+---------------------------------------------+--------------------



          +------------+----------------------------+----------------------+---------------------------------------------------+----------------------------------------+--------------------------------------+---------------------------------------------+--------------------
Type 1A-2 | Mnemonic   | ALU op                     | Full mnemonic        | Encoding                                          | Assembler validations                  | CPU Validations                      | Description                                 | Notes
          |            |                            |                      +------+------+-------+----------+------------------+                                        |                                      |                                             |
          |            |                            |                      | Type | Op   | Und   | RY (dst) | Data             |                                        |                                      |                                             |
          |            |                            |                      | 2    | 4    | 5     | 5        | 16               |                                        |                                      |                                             |
          +------------+----------------------------+----------------------+------+------+-------+----------+------------------+----------------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | jal        | add (Rx + Disp)            | jal        rx,DIS    | 01   | 0001 | ///// | YYYYY    | dddddddddddddddd | DIS range: -32768:32767                |                                      | Jump and link                               |
          +------------+----------------------------+----------------------+------+------+-------+----------+------------------+----------------------------------------+--------------------------------------+---------------------------------------------+--------------------



          +------------+----------------------------+----------------------+---------------------------------------------------+----------------------------------------+--------------------------------------+---------------------------------------------+--------------------
Type 1A-3 | Mnemonic   | ALU op                     | Full mnemonic        | Encoding                                          | Assembler validations                  | CPU Validations                      | Description                                 | Notes
          |            |                            |                      +------+------+----------+------+-------------------+                                        |                                      |                                             |
          |            |                            |                      | Type | Op   | RX (src) | SOP  | Data              |                                        |                                      |                                             |
          |            |                            |                      | 2    | 4    | 5        | 4    | 17                |                                        |                                      |                                             |
          +------------+----------------------------+----------------------+------+------+----------+------+-------------------+----------------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | bc         | add (PC + Disp)            | bc         rx,DIS    | 01   | 0010 | XXXXX    | 0000 | ddddddddddddddddd | DIS range: -65536:65535                |                                      | Branch if carry in tested GPR               |
          | bv         | add (PC + Disp)            | bv         rx,DIS    | 01   | 0010 | XXXXX    | 0001 | ddddddddddddddddd | DIS range: -65536:65535                |                                      | Branch if overflow in tested GPR            |
          | bz         | add (PC + Disp)            | bz         rx,DIS    | 01   | 0010 | XXXXX    | 0010 | ddddddddddddddddd | DIS range: -65536:65535                |                                      | Branch if zero in tested GPR                |
          | bn         | add (PC + Disp)            | bn         rx,DIS    | 01   | 0010 | XXXXX    | 0011 | ddddddddddddddddd | DIS range: -65536:65535                |                                      | Branch if negative in tested GPR            |
          | bnc        | add (PC + Disp)            | bnc        rx,DIS    | 01   | 0010 | XXXXX    | 0100 | ddddddddddddddddd | DIS range: -65536:65535                |                                      | Branch if not carry in tested GPR           |
          | bnv        | add (PC + Disp)            | bnv        rx,DIS    | 01   | 0010 | XXXXX    | 0101 | ddddddddddddddddd | DIS range: -65536:65535                |                                      | Branch if not overflow in tested GPR        |
          | bnz        | add (PC + Disp)            | bnz        rx,DIS    | 01   | 0010 | XXXXX    | 0110 | ddddddddddddddddd | DIS range: -65536:65535                |                                      | Branch if not zero in tested GPR            |
          | bnn        | add (PC + Disp)            | bnn        rx,DIS    | 01   | 0010 | XXXXX    | 0111 | ddddddddddddddddd | DIS range: -65536:65535                |                                      | Branch if not negative in tested GPR        |
          | bfpan      | add (PC + Disp)            | bfpan      fx,DIS    | 01   | 0010 | XXXXX    | 1000 | ddddddddddddddddd | DIS range: -65536:65535                |                                      | Branch if is a number in tested FPR         |
          | bfpinf     | add (PC + Disp)            | bfpinf     fx,DIS    | 01   | 0010 | XXXXX    | 1001 | ddddddddddddddddd | DIS range: -65536:65535                |                                      | Branch if is infinite in tested FPR         |
          | bfpz       | add (PC + Disp)            | bfpz       fx,DIS    | 01   | 0010 | XXXXX    | 1010 | ddddddddddddddddd | DIS range: -65536:65535                |                                      | Branch if zero in tested FPR                |
          | bfpn       | add (PC + Disp)            | bfpn       fx,DIS    | 01   | 0010 | XXXXX    | 1011 | ddddddddddddddddd | DIS range: -65536:65535                |                                      | Branch if negative in tested FPR            |
          | bfpnan     | add (PC + Disp)            | bfpnan     fx,DIS    | 01   | 0010 | XXXXX    | 1100 | ddddddddddddddddd | DIS range: -65536:65535                |                                      | Branch if is not a number in tested FPR     |
          | bfpninf    | add (PC + Disp)            | bfpninf    fx,DIS    | 01   | 0010 | XXXXX    | 1101 | ddddddddddddddddd | DIS range: -65536:65535                |                                      | Branch if is not infinite in tested FPR     |
          | bfpnz      | add (PC + Disp)            | bfpnz      fx,DIS    | 01   | 0010 | XXXXX    | 1110 | ddddddddddddddddd | DIS range: -65536:65535                |                                      | Branch if not zero in tested FPR            |
          | bfpnn      | add (PC + Disp)            | bfpnn      fx,DIS    | 01   | 0010 | XXXXX    | 1111 | ddddddddddddddddd | DIS range: -65536:65535                |                                      | Branch if not negative in tested FPR        |
          +------------+----------------------------+----------------------+------+------+----------+------+-------------------+----------------------------------------+--------------------------------------+---------------------------------------------+--------------------



          +------------+----------------------------+----------------------+----------------------------------------------------+----------------------------------------+--------------------------------------+---------------------------------------------+--------------------
Type 1B   | Mnemonic   | ALU op                     | Full mnemonic        | Encoding                                           | Assembler validations                  | CPU Validations                      | Description                                 | Notes
          |            |                            |                      +------+------+-------+----------+-------------------+                                        |                                      |                                             |
          |            |                            |                      | Type | OPC  | Und   | RY (dst) | Data              |                                        |                                      |                                             |
          |            |                            |                      | 2    | 4    | 5     | 5        | 16                |                                        |                                      |                                             |
          +------------+----------------------------+----------------------+------+------+-------+----------+-------------------+----------------------------------------+--------------------------------------+------------------------------------------------------------------
          | loadi      | nop                        | loadi      rx,IMM    | 01   | 0100 | ///// | YYYYY    | iiiiiiiiiiiiiiii  | IMM range: -32768:32767                |                                      | Load immediate word                         | Agregadas, no existían. Reemplazan a las variantes .b y .h que fueron eliminadas. Se agregan pseudos para variantes .b .h y .w
          | loadui     | nop                        | loadui     rx,IMM    | 01   | 0101 | ///// | YYYYY    | iiiiiiiiiiiiiiii  | IMM range: 0:65535                     |                                      | Load immediate unsigned word                |
          | lhi        | nop                        | lhi        rx,IMM    | 01   | 0110 | ///// | YYYYY    | iiiiiiiiiiiiiiii  | IMM range: 0:65535                     |                                      | Load high immedate                          |
          +------------+----------------------------+----------------------+------+------+-------+----------+-------------------+----------------------------------------+--------------------------------------+---------------------------------------------+--------------------



          +------------+----------------------------+----------------------+-----------------------------------------------------------------+----------------------------------------+--------------------------------------+---------------------------------------------+--------------------
Type 2A   | Mnemonic   | ALU op                     | Full mnemonic        | Encoding                                                        | Assembler validations                  | CPU Validations                      | Description                                 | Notes
          |            |                            |                      +------+------+----------+----------+-------+------+-------+------+                                        |                                      |                                             |
          |            |                            |                      | Type | OPC  | RX (src) | RY (dst) | Und   | Size | SOP   | Und  |                                        |                                      |                                             |
          |            |                            |                      | 2    | 4    | 5        | 5        | 5     | 2    | 5     | 4    |                                        |                                      |                                             |
          +------------+----------------------------+----------------------+------+------+----------+----------+-------+------+-------+------+----------------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | mov.w      | nop                        | mov.w      rx,ry     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  00  | 00000 | //// |                                        |                                      | Move GPR with flags                         |
          | mov.l      | nop                        | mov.l      rx,ry     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  01  | 00000 | //// |                                        | x and y must be even                 | Move long GPR with flags                    |
          | mov.f      | nop                        | mov.f      fx,fy     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  10  | 00000 | //// |                                        |                                      | Move FPR with flags                         |
          | mov.d      | nop                        | mov.d      fx,fy     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  11  | 00000 | //// |                                        | x and y must be even                 | Move double FPR with flags                  |
          +------------+----------------------------+----------------------+------+------+----------+----------+-------+------+-------+------+----------------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | movf2w     | nop                        | movf2w     rx,fy     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  00  | 00001 | //// |                                        |                                      | Move FPR to GPR                             |
          | movw2f     | nop                        | movw2f     fx,ry     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  01  | 00001 | //// |                                        |                                      | Move GPR to FPR                             |
          | movd2l     | nop                        | movd2l     rx,fy     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  10  | 00001 | //// |                                        | x and y must be even                 | Move long GPR to double FPR                 |
          | movl2d     | nop                        | movl2d     fx,ry     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  11  | 00001 | //// |                                        | x and y must be even                 | Move double FPR to long GPR                 |
          +------------+----------------------------+----------------------+------+------+----------+----------+-------+------+-------+------+----------------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | movw2s     | nop                        | movw2s     sx,ry     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  00  | 00010 | //// |                                        |                                      | Move GPR to SPR                             |
          | movs2w     | nop                        | movs2w     rx,sy     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  01  | 00010 | //// |                                        |                                      | Move SPR to GPR                             |
          +------------+----------------------------+----------------------+------+------+----------+----------+-------+------+-------+------+----------------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | cnvf2w     | conversion unit            | cnvf2w     rx,fy     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  00  | 00011 | //// |                                        |                                      | Convert float (FPR) to integer (GPR)        |
          | cnvd2w     | conversion unit            | cnvd2w     rx,fy     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  01  | 00011 | //// |                                        | y must be even                       | Convert double (FPR) to integer (GPR)       |
          | cnvf2l     | conversion unit            | cnvf2l     rx,fy     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  10  | 00011 | //// |                                        | x must be even                       | Convert float (FPR) to long (GPR)           |
          | cnvd2l     | conversion unit            | cnvd2l     rx,fy     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  11  | 00011 | //// |                                        | x and y must be even                 | Convert double (FPR) to long (GPR)          |
          +------------+----------------------------+----------------------+------+------+----------+----------+-------+------+-------+------+----------------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | cnvw2f     | conversion unit            | cnvw2f     fx,ry     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  00  | 00100 | //// |                                        |                                      | Convert integer (GPR) to float (FPR)        |
          | cnvw2d     | conversion unit            | cnvw2d     fx,ry     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  01  | 00100 | //// |                                        | x must be even                       | Convert integer (GPR) to double (FPR)       |
          | cnvl2f     | conversion unit            | cnvl2f     fx,ry     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  10  | 00100 | //// |                                        | y must be even                       | Convert long (GPR) to float (FPR)           |
          | cnvl2d     | conversion unit            | cnvl2d     fx,ry     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  11  | 00100 | //// |                                        | x and y must be even                 | Convert long (GPR) to double (FPR)          |
          +------------+----------------------------+----------------------+------+------+----------+----------+-------+------+-------+------+----------------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | cnvf2d     | conversion unit            | cnvf2d     fx,fy     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  00  | 00101 | //// |                                        | x must be even                       | Convert float (FPR) to double (FPR)         | Definir conversion unit en el doc
          | cnvd2f     | conversion unit            | cnvd2f     fx,fy     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  01  | 00101 | //// |                                        | y must be even                       | Convert double (FPR) to float (FPR)         |
          +------------+----------------------------+----------------------+------+------+----------+----------+-------+------+-------+------+----------------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | inv.w      | alu (invert)               | inv.w      rx,ry     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  00  | 00110 | //// |                                        |                                      | Invert GPR into GPR                         |
          | inv.l      | alu (invert)               | inv.l      rx,ry     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  01  | 00110 | //// |                                        | x and y must be even                 | Invert long GPR into long GPR               |
          +------------+----------------------------+----------------------+------+------+----------+----------+-------+------+-------+------+----------------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | jral       | nop                        | jral       rx,ry     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  00  | 00111 | //// |                                        |                                      | Jump to address in register and link        |
          +------------+----------------------------+----------------------+------+------+----------+----------+-------+------+-------+------+----------------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | cos.w      | cos (cordic GPR)           | cos.w      rx,ry     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  00  | 10000 | //// |                                        |                                      | Cordic word cosine                          |
          | cos.l      | cos (cordic GPR)           | cos.l      rx,ry     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  01  | 10000 | //// |                                        | x and y must be even                 | Cordic long cosine                          |
          | cos.f      | cos (cordic FPR)           | cos.f      fx,fy     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  10  | 10000 | //// |                                        |                                      | Cordic float cosine                         |
          | cos.d      | cos (cordic FPR)           | cos.d      fx,fy     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  11  | 10000 | //// |                                        | x and y must be even                 | Cordic double cosine                        |
          +------------+----------------------------+----------------------+------+------+----------+----------+-------+------+-------+------+----------------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | cosh.w     | cosh (cordic GPR)          | cosh.w     rx,ry     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  00  | 10001 | //// |                                        |                                      | Cordic word hyperbolic cosine               |
          | cosh.l     | cosh (cordic GPR)          | cosh.l     rx,ry     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  01  | 10001 | //// |                                        | x and y must be even                 | Cordic long hyperbolic cosine               |
          | cosh.f     | cosh (cordic FPR)          | cosh.f     fx,fy     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  10  | 10001 | //// |                                        |                                      | Cordic float hyperbolic cosine              |
          | cosh.d     | cosh (cordic FPR)          | cosh.d     fx,fy     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  11  | 10001 | //// |                                        | x and y must be even                 | Cordic double hyperbolic cosine             |
          +------------+----------------------------+----------------------+------+------+----------+----------+-------+------+-------+------+----------------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | sin.w      | sin (cordic GPR)           | sin.w      rx,ry     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  00  | 10010 | //// |                                        |                                      | Cordic word sine                            |
          | sin.l      | sin (cordic GPR)           | sin.l      rx,ry     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  01  | 10010 | //// |                                        | x and y must be even                 | Cordic long sine                            |
          | sin.f      | sin (cordic FPR)           | sin.f      fx,fy     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  10  | 10010 | //// |                                        |                                      | Cordic float sine                           |
          | sin.d      | sin (cordic FPR)           | sin.d      fx,fy     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  11  | 10010 | //// |                                        | x and y must be even                 | Cordic double sine                          |
          +------------+----------------------------+----------------------+------+------+----------+----------+-------+------+-------+------+----------------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | sinh.w     | sinh (cordic GPR)          | sinh.w     rx,ry     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  00  | 10011 | //// |                                        |                                      | Cordic word hyperbolic sine                 |
          | sinh.l     | sinh (cordic GPR)          | sinh.l     rx,ry     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  01  | 10011 | //// |                                        | x and y must be even                 | Cordic long hyperbolic sine                 |
          | sinh.f     | sinh (cordic FPR)          | sinh.f     fx,fy     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  10  | 10011 | //// |                                        |                                      | Cordic float hyperbolic sine                |
          | sinh.d     | sinh (cordic FPR)          | sinh.d     fx,fy     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  11  | 10011 | //// |                                        | x and y must be even                 | Cordic double hyperbolic sine               |
          +------------+----------------------------+----------------------+------+------+----------+----------+-------+------+-------+------+----------------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | s1mr2.w    | sqrt(1-Ry^2) (cordic GPR)  | s1mr2.w    rx,ry     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  00  | 10100 | //// |                                        |                                      |                                             |
          | s1mr2.l    | sqrt(1-Ry^2) (cordic GPR)  | s1mr2.l    rx,ry     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  01  | 10100 | //// |                                        | x and y must be even                 |                                             |
          | s1mr2.f    | sqrt(1-Ry^2) (cordic FPR)  | s1mr2.f    fx,fy     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  10  | 10100 | //// |                                        |                                      |                                             |
          | s1mr2.d    | sqrt(1-Ry^2) (cordic FPR)  | s1mr2.d    fx,fy     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  11  | 10100 | //// |                                        | x and y must be even                 |                                             |
          +------------+----------------------------+----------------------+------+------+----------+----------+-------+------+-------+------+----------------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | s1pr2.w    | sqrt(1+Ry^2) (cordic GPR)  | s1pr2.w    rx,ry     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  00  | 10101 | //// |                                        |                                      |                                             |
          | s1pr2.l    | sqrt(1+Ry^2) (cordic GPR)  | s1pr2.l    rx,ry     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  01  | 10101 | //// |                                        | x and y must be even                 |                                             |
          | s1pr2.f    | sqrt(1+Ry^2) (cordic FPR)  | s1pr2.f    fx,fy     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  10  | 10101 | //// |                                        |                                      |                                             |
          | s1pr2.d    | sqrt(1+Ry^2) (cordic FPR)  | s1pr2.d    fx,fy     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  11  | 10101 | //// |                                        | x and y must be even                 |                                             |
          +------------+----------------------------+----------------------+------+------+----------+----------+-------+------+-------+------+----------------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | atan.w     | atan (cordic GPR)          | atan.w     rx,ry     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  00  | 10110 | //// |                                        |                                      | Cordic word arctangent                      |
          | atan.l     | atan (cordic GPR)          | atan.l     rx,ry     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  01  | 10110 | //// |                                        | x and y must be even                 | Cordic long arctangent                      |
          | atan.f     | atan (cordic FPR)          | atan.f     fx,fy     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  10  | 10110 | //// |                                        |                                      | Cordic float arctangent                     |
          | atan.d     | atan (cordic FPR)          | atan.d     fx,fy     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  11  | 10110 | //// |                                        | x and y must be even                 | Cordic float arctangent                     |
          +------------+----------------------------+----------------------+------+------+----------+----------+-------+------+-------+------+----------------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | atanh.w    | atanh (cordic GPR)         | atanh.w    rx,ry     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  00  | 10111 | //// |                                        |                                      | Cordic word hyperbolic arctangent           |
          | atanh.l    | atanh (cordic GPR)         | atanh.l    rx,ry     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  01  | 10111 | //// |                                        | x and y must be even                 | Cordic long hyperbolic arctangent           |
          | atanh.f    | atanh (cordic FPR)         | atanh.f    fx,fy     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  10  | 10111 | //// |                                        |                                      | Cordic float hyperbolic arctangent          |
          | atanh.d    | atanh (cordic FPR)         | atanh.d    fx,fy     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  11  | 10111 | //// |                                        | x and y must be even                 | Cordic float hyperbolic arctangent          |
          +------------+----------------------------+----------------------+------+------+----------+----------+-------+------+-------+------+----------------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | ln.w       | log (cordic GPR)           | ln.w       rx,ry     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  00  | 11000 | //// |                                        |                                      | Natural log of word                         |
          | ln.l       | log (cordic GPR)           | ln.l       rx,ry     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  01  | 11000 | //// |                                        | x and y must be even                 | Natural log of long                         |
          | ln.f       | log (cordic FPR)           | ln.f       fx,fy     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  10  | 11000 | //// |                                        |                                      | Natural log of float                        |
          | ln.d       | log (cordic FPR)           | ln.d       fx,fy     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  11  | 11000 | //// |                                        | x and y must be even                 | Natural log of double                       |
          +------------+----------------------------+----------------------+------+------+----------+----------+-------+------+-------+------+----------------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | sqrt.w     | sqrt (cordic GPR)          | sqrt.w     rx,ry     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  00  | 11001 | //// |                                        |                                      | Square root of word                         |
          | sqrt.l     | sqrt (cordic GPR)          | sqrt.l     rx,ry     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  01  | 11001 | //// |                                        | x and y must be even                 | Square root of long                         |
          | sqrt.f     | sqrt (cordic FPR)          | sqrt.f     fx,fy     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  10  | 11001 | //// |                                        |                                      | Square root of float                        |
          | sqrt.d     | sqrt (cordic FPR)          | sqrt.d     fx,fy     | 10   | 0000 | XXXXX    | YYYYY    | ///// |  11  | 11001 | //// |                                        | x and y must be even                 | Square root of double                       |
          +------------+----------------------------+----------------------+------+------+----------+----------+-------+------+-------+------+----------------------------------------+--------------------------------------+---------------------------------------------+--------------------




          +------------+----------------------------+----------------------+------------------------------------------------------+----------------------------------------+--------------------------------------+---------------------------------------------+--------------------
Type 2B   | Mnemonic   | ALU op                     | Full mnemonic        | Encoding                                             | Assembler validations                  | CPU Validations                      | Description                                 | Notes
          |            |                            |                      +------+------+----------+----------+------------------+                                        |                                      |                                             |
          |            |                            |                      | Type | OPC  | RX (src) | RY (dst) | Data             |                                        |                                      |                                             |
          |            |                            |                      | 2    | 4    | 5        | 5        | 16               |                                        |                                      |                                             |
          +------------+----------------------------+----------------------+------+------+----------+----------+------------------+----------------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | addi.w     | add (gpr + imm)            | addi.w     rx,ry,IMM | 10   | 0001 | XXXXX    | YYYYY    | iiiiiiiiiiiiiiii | IMM range: -32768:32767                |                                      | Add immediate to GPR                        | Eliminadas addic.w y adduic.w.
          | addui.w    | add (gpr + imm)            | addui.w    rx,ry,IMM | 10   | 0010 | XXXXX    | YYYYY    | iiiiiiiiiiiiiiii | IMM range: 0:65536                     |                                      | Add unsigned immediate to GPR               |
          | subi.w     | sub (gpr – imm)            | subi.w     rx,ry,IMM | 10   | 0011 | XXXXX    | YYYYY    | iiiiiiiiiiiiiiii | IMM range: -32768:32767                |                                      | Substract immediate from GPR                | Eliminadas subic.w y subuic.w. Siempre se considera el carry de los registros involucrados (está bien???)
          | subui.w    | sub (gpr – imm)            | subui.w    rx,ry,IMM | 10   | 0100 | XXXXX    | YYYYY    | iiiiiiiiiiiiiiii | IMM range: 0:65536                     |                                      | Substract unsigned immediate from GPR       |
          | load.b     | add (gpr + dis)            | load.b     rx,ry,DIS | 10   | 0101 | XXXXX    | YYYYY    | dddddddddddddddd | DIS range: -32768:32767                |                                      | Load byte into GPR                          | Alu para address calc
          | loadu.b    | add (gpr + dis)            | loadu.b    rx,ry,DIS | 10   | 0110 | XXXXX    | YYYYY    | dddddddddddddddd | DIS range: -32768:32767                |                                      | Load unsigned byte into GPR                 | Alu para address calc
          | load.h     | add (gpr + dis)            | load.h     rx,ry,DIS | 10   | 0111 | XXXXX    | YYYYY    | dddddddddddddddd | DIS range: -32768:32767                | Aligned to 2                         | Load half into GPR                          | Alu para address calc
          | loadu.h    | add (gpr + dis)            | loadu.h    rx,ry,DIS | 10   | 1000 | XXXXX    | YYYYY    | dddddddddddddddd | DIS range: -32768:32767                | Aligned to 2                         | Load unsigned half into GPR                 | Alu para address calc
          | load.w     | add (gpr + dis)            | load.w     rx,ry,DIS | 10   | 1001 | XXXXX    | YYYYY    | dddddddddddddddd | DIS range: -32768:32767                | Aligned to 4                         | Load word into GPR                          | Alu para address calc
          | load.f     | add (gpr + dis)            | load.f     fx,ry,DIS | 10   | 1010 | XXXXX    | YYYYY    | dddddddddddddddd | DIS range: -32768:32767                | Aligned to 4                         | Load float into FPR                         | Alu para address calc
          | store.b    | add (gpr + dis)            | store.b    rx,ry,DIS | 10   | 1011 | XXXXX    | YYYYY    | dddddddddddddddd | DIS range: -32768:32767                |                                      | Store byte from GPR                         | Alu para address calc
          | store.h    | add (gpr + dis)            | store.h    rx,ry,DIS | 10   | 1100 | XXXXX    | YYYYY    | dddddddddddddddd | DIS range: -32768:32767                | Alineado a 2                         | Store half from GPR                         | Alu para address calc
          | store.w    | add (gpr + dis)            | store.w    rx,ry,DIS | 10   | 1101 | XXXXX    | YYYYY    | dddddddddddddddd | DIS range: -32768:32767                | Alineado a 4                         | Store word from GPR                         | Alu para address calc
          | store.f    | add (gpr + dis)            | store.f    fx,ry,DIS | 10   | 1110 | XXXXX    | YYYYY    | dddddddddddddddd | DIS range: -32768:32767                | Alineado a 4                         | Store float from FPR                        | Alu para address calc
          +------------+----------------------------+----------------------+------+------+----------+----------+------------------+ ---------------------------------------+--------------------------------------+---------------------------------------------+--------------------



          +------------+----------------------------+----------------------+-------------------------------------------------------------+-------------------------------+--------------------------------------+---------------------------------------------+--------------------
Type 2C   | Mnemonic   | ALU op                     | Full mnemonic        | Encoding                                                    | Assembler validations         | CPU Validations                      | Description                                 | Notes
          |            |                            |                      +------+------+----------+----------+-----+-------------------+                               |                                      |                                             |
          |            |                            |                      | Type | OPC  | RX (src) | RY (dst) | SOP | Nib | Und         |                               |                                      |                                             |
          |            |                            |                      | 2    | 4    | 5        | 5        | 2   | 3   | 11          |                               |                                      |                                             |
          +------------+----------------------------+----------------------+------+------+----------+----------+-----+-----+-------------+-------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | movn2fg.g  | add (4*nib + 3)            | movn2fg.g  rx,ry,NIB | 10   | 1111 | XXXXX    | YYYYY    | 00  | NNN | /////////// | NIB range: 0:7                |                                      | Move nibble to flags                        | 4* nib es dos shifteos del nib. La alu hace la suma +3, nada más (el shifteo se hace con unos shifters locales y chau). Le agregué el .g y el .f para saber si se trata de GPR o FPR!!! Eso no estaba!!! OJO CREO QUE TIRÉ FRUTA, LA CUENTA NO HAY QUE HACERLA ME PARECE!!!
          | movfg2n.g  | add (4*nib + 3)            | movfg2n.g  rx,ry,NIB | 10   | 1111 | XXXXX    | YYYYY    | 01  | NNN | /////////// | NIB range: 0:7                |                                      | Move flags to nibble                        |
          | movn2fg.f  | add (4*nib + 3)            | movn2fg.f  fx,ry,NIB | 10   | 1111 | XXXXX    | YYYYY    | 10  | NNN | /////////// | NIB range: 0:7                |                                      | Move nibble to flags                        |
          | movfg2n.f  | add (4*nib + 3)            | movfg2n.f  rx,fy,NIB | 10   | 1111 | XXXXX    | YYYYY    | 11  | NNN | /////////// | NIB range: 0:7                |                                      | Move flags to nibble                        |
          +------------+----------------------------+----------------------+------+------+----------+----------+------+-----+------------+-------------------------------+--------------------------------------+---------------------------------------------+--------------------



          +------------+----------------------------+----------------------+--------------------------------------------------------------------+-------------------------------+--------------------------------------+---------------------------------------------+--------------------
Type 3    | Mnemonic   | ALU op                     | Full mnemonic        | Encoding                                                           | Assembler validations         | CPU Validations                      | Description                                 | Notes
          |            |                            |                      +------+------+----------+----------+-----+-------------------+------+                               |                                      |                                             |
          |            |                            |                      | Type | Und  | RX (src) | RY (dst) | RZ (src) | Size | SOP   | Und  |                               |                                      |                                             |
          |            |                            |                      | 2    | 4    | 5        | 5        | 5        | 2    | 5     | 4    |                               |                                      |                                             |
          +------------+----------------------------+----------------------+------+------+----------+----------+----------+-------+------+------+-------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | add.w      | add GPRs                   | add.w      rx,ry,rz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 00   | 00000 | //// |                               |                                      | Add words                                   | Eliminadas variantes on carry y overflow
          | add.l      | add GPRs                   | add.l      rx,ry,rz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 01   | 00000 | //// |                               | x, y and z must be even              | Add longs                                   |
          | add.f      | add FPRs                   | add.f      fx,fy,fz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 10   | 00000 | //// |                               |                                      | Add floats                                  |
          | add.d      | add FPRs                   | add.d      fx,fy,fz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 11   | 00000 | //// |                               | x, y and z must be even              | add doubles                                 |
          +------------+----------------------------+----------------------+------+------+----------+----------+----------+------+-------+------+-------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | sub.w      | sub GPRs                   | sub.w      rx,ry,rz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 00   | 00001 | //// |                               |                                      | Substract words                             | Eliminadas variantes on carry y overflow
          | sub.l      | sub GPRs                   | sub.l      rx,ry,rz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 01   | 00001 | //// |                               | x, y and z must be even              | Substract longs                             |
          | sub.f      | sub FPRs                   | sub.f      fx,fy,fz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 10   | 00001 | //// |                               |                                      | Substract floats                            |
          | sub.d      | sub FPRs                   | sub.d      fx,fy,fz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 11   | 00001 | //// |                               | x, y and z must be even              | Substract doubles                           |
          +------------+----------------------------+----------------------+------+------+----------+----------+----------+------+-------+------+-------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | mult.w     | mul GPRs                   | mult.w     rx,ry,rz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 00   | 00010 | //// |                               |                                      | Multiply words into word                    | Eliminadas variantes on carry y overflow
          | mult.l     | mul GPRs                   | mult.l     rx,ry,rz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 01   | 00010 | //// |                               | z must be even                       | Multiply words into long                    |
          | mult.f     | mul FPRs                   | mult.f     fx,fy,fz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 10   | 00010 | //// |                               |                                      | Multiply floats                             |
          | mult.d     | mul FPRs                   | mult.d     fx,fy,fz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 11   | 00010 | //// |                               | x, y and z must be even              | Multiply doubles                            |
          +------------+----------------------------+----------------------+------+------+----------+----------+----------+------+-------+------+-------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | div.w      | div GPRs                   | div.w      rx,ry,rz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 00   | 00011 | //// |                               |                                      | Divide words                                | Eliminadas variantes on carry y overflow
          | div.l      | div GPRs                   | div.l      rx,ry,rz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 01   | 00011 | //// |                               | x, y and z must be even              | Divide longs                                |
          | div.f      | div FPRs                   | div.f      fx,fy,fz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 10   | 00011 | //// |                               |                                      | Divide floats                               |
          | div.d      | div FPRs                   | div.d      fx,fy,fz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 11   | 00011 | //// |                               | x, y and z must be even              | Divide doubles                              |
          +------------+----------------------------+----------------------+------+------+----------+----------+----------+------+-------+------+-------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | rem.w      | rem GPRs                   | rem.w      rx,ry,rz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 00   | 00100 | //// |                               |                                      | Remainder of words                          | Agregadas, no existían
          | rem.l      | rem GPRs                   | rem.l      rx,ry,rz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 01   | 00100 | //// |                               | x, y and z must be even              | Remainder of longs                          |
          +------------+----------------------------+----------------------+------+------+----------+----------+----------+------+-------+------+-------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | and.w      | and GPRs                   | and.w      rx,ry,rz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 00   | 00101 | //// |                               |                                      | Bitwise and words                           |
          | and.l      | and GPRs                   | and.l      rx,ry,rz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 01   | 00101 | //// |                               | x, y and z must be even              | Bitwise and longs                           |
          +------------+----------------------------+----------------------+------+------+----------+----------+----------+------+-------+------+-------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | or.w       | or GPR's                   | or.w       rx,ry,rz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 00   | 00110 | //// |                               |                                      | Bitwise or words                            |
          | or.l       | or GPR's                   | or.l       rx,ry,rz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 01   | 00110 | //// |                               | x, y and z must be even              | Bitwise or longs                            |
          +------------+----------------------------+----------------------+------+------+----------+----------+----------+------+-------+------+-------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | xor.w      | xor GPR's                  | xor.w      rx,ry,rz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 00   | 00111 | //// |                               |                                      | Bitwise xor words                           |
          | xor.l      | xor GPR's                  | xor.l      rx,ry,rz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 01   | 00111 | //// |                               | x, y and z must be even              | Bitwise xor longs                           |
          +------------+----------------------------+----------------------+------+------+----------+----------+----------+------+-------+------+-------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | rl.w       | rotation (gpr << gpr)      | rl.w       rx,ry,rz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 00   | 01000 | //// |                               |                                      | Rotate GPR left by GPR                      |
          | rl.l       | rotation (gpr << gpr)      | rl.l       rx,ry,rz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 01   | 01000 | //// |                               | x, y and z must be even              | Rotate long GPR left by GPR                 | Está bien que rz esté restringido a ser doble??? Por comodidad estaría bien, pero es medio al pedo
          +------------+----------------------------+----------------------+------+------+----------+----------+----------+------+-------+------+-------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | rr.w       | rotation (gpr >> gpr)      | rr.w       rx,ry,rz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 00   | 01001 | //// |                               |                                      | Rotate GPR right by GPR                     |
          | rr.l       | rotation (gpr >> gpr)      | rr.l       rx,ry,rz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 01   | 01001 | //// |                               | x, y and z must be even              | Rotate long GPR right by GPR                | Está bien que rz esté restringido a ser doble??? Por comodidad estaría bien, pero es medio al pedo
          +------------+----------------------------+----------------------+------+------+----------+----------+----------+------+-------+------+-------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | sl.w       | shift (gpr << gpr)         | sl.w       rx,ry,rz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 00   | 01010 | //// |                               |                                      | Shift GPR left by GPR                       |
          | sl.l       | shift (gpr << gpr)         | sl.l       rx,ry,rz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 01   | 01010 | //// |                               | x, y and z must be even              | Shift long GPR left by GPR                  | Está bien que rz esté restringido a ser doble??? Por comodidad estaría bien, pero es medio al pedo
          +------------+----------------------------+----------------------+------+------+----------+----------+----------+------+-------+------+-------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | sra.w      | rotation (gpr >> gpr)      | sra.w      rx,ry,rz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 00   | 01011 | //// |                               |                                      | Arithmetic shift GPR right by GPR           |
          | sra.l      | rotation (gpr >> gpr)      | sra.l      rx,ry,rz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 01   | 01011 | //// |                               | x, y and z must be even              | Arithmetic shift long GPR right by GPR      | Está bien que rz esté restringido a ser doble??? Por comodidad estaría bien, pero es medio al pedo
          +------------+----------------------------+----------------------+------+------+----------+----------+----------+------+-------+------+-------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | srl.w      | rotation (gpr >> gpr)      | srl.w      rx,ry,rz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 00   | 01100 | //// |                               |                                      | Logical shift GPR right by GPR              |
          | srl.l      | rotation (gpr >> gpr)      | srl.l      rx,ry,rz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 01   | 01100 | //// |                               | x, y and z must be even              | Logical shift long GPR right by GPR         | Está bien que rz esté restringido a ser doble??? Por comodidad estaría bien, pero es medio al pedo
          +------------+----------------------------+----------------------+------+------+----------+----------+----------+------+-------+------+-------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | pol2recx.w | ry * cos rx                | pol2recx.w rx,ry,rz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 00   | 10000 | //// |                               |                                      | Polar 2 rectangular x from word GPRs        |
          | pol2recx.l | ry * cos rx                | pol2recx.l rx,ry,rz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 01   | 10000 | //// |                               | x, y and z must be even              | Polar 2 rectangular x from long GPRs        |
          | pol2recx.f | ry * cos rx                | pol2recx.f fx,fy,fz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 10   | 10000 | //// |                               |                                      | Polar 2 rectangular x from float FPRs       |
          | pol2recx.d | ry * cos rx                | pol2recx.d fx,fy,fz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 11   | 10000 | //// |                               | x, y and z must be even              | Polar 2 rectangular x from double FPRs      |
          +------------+----------------------------+----------------------+------+------+----------+----------+----------+------+-------+------+-------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | pol2recy.w | ry * sin rx                | pol2recy.w rx,ry,rz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 00   | 10001 | //// |                               |                                      | Polar 2 rectangular y from word GPRs        |
          | pol2recy.l | ry * sin rx                | pol2recy.l rx,ry,rz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 01   | 10001 | //// |                               | x, y and z must be even              | Polar 2 rectangular y from long GPRs        |
          | pol2recy.f | ry * sin rx                | pol2recy.f fx,fy,fz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 10   | 10001 | //// |                               |                                      | Polar 2 rectangular y from float FPRs       |
          | pol2recy.d | ry * sin rx                | pol2recy.d fx,fy,fz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 11   | 10001 | //// |                               | x, y and z must be even              | Polar 2 rectangular y from double FPRs      |
          +------------+----------------------------+----------------------+------+------+----------+----------+----------+------+-------+------+-------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | hyp2recx.w | ry * cosh rx               | hyp2recx.w rx,ry,rz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 00   | 10010 | //// |                               |                                      | Hyperbolic 2 rectangular x from word GPRs   |
          | hyp2recx.l | ry * cosh rx               | hyp2recx.l rx,ry,rz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 01   | 10010 | //// |                               | x, y and z must be even              | Hyperbolic 2 rectangular x from long GPRs   |
          | hyp2recx.f | ry * cosh rx               | hyp2recx.f fx,fy,fz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 10   | 10010 | //// |                               |                                      | Hyperbolic 2 rectangular x from float FPRs  |
          | hyp2recx.d | ry * cosh rx               | hyp2recx.d fx,fy,fz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 11   | 10010 | //// |                               | x, y and z must be even              | Hyperbolic 2 rectangular x from double FPRs |
          +------------+----------------------------+----------------------+------+------+----------+----------+----------+------+-------+------+-------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | hyp2recy.w | ry * sinh rx               | hyp2recy.w rx,ry,rz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 00   | 10011 | //// |                               |                                      | Hyperbolic 2 rectangular y from word GPRs   |
          | hyp2recy.l | ry * sinh rx               | hyp2recy.l rx,ry,rz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 01   | 10011 | //// |                               | x, y and z must be even              | Hyperbolic 2 rectangular y from long GPRs   |
          | hyp2recy.f | ry * sinh rx               | hyp2recy.f fx,fy,fz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 10   | 10011 | //// |                               |                                      | Hyperbolic 2 rectangular y from float FPRs  |
          | hyp2recy.d | ry * sinh rx               | hyp2recy.d fx,fy,fz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 11   | 10011 | //// |                               | x, y and z must be even              | Hyperbolic 2 rectangular y from double FPRs |
          +------------+----------------------------+----------------------+------+------+----------+----------+----------+------+-------+------+-------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | norm.w     | sqrt (rx^2 +ry^2)          | norm.w     rx,ry,rz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 00   | 10100 | //// |                               |                                      | Norm of words vector                        |
          | norm.l     | sqrt (rx^2 +ry^2)          | norm.l     rx,ry,rz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 01   | 10100 | //// |                               | x, y and z must be even              | Norm of longs vector                        |
          | norm.f     | sqrt (rx^2 +ry^2)          | norm.f     fx,fy,fz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 10   | 10100 | //// |                               |                                      | Norm of floats vector                       |
          | norm.d     | sqrt (rx^2 +ry^2)          | norm.d     fx,fy,fz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 11   | 10100 | //// |                               | x, y and z must be even              | Norm of doubles vector                      |
          +------------+----------------------------+----------------------+------+------+----------+----------+----------+------+-------+------+-------------------------------+--------------------------------------+---------------------------------------------+--------------------
          | atan2.w    | atan (rx, ry)              | atan2.w    rx,ry,rz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 00   | 10101 | //// |                               |                                      | Atan entre words                            |
          | atan2.l    | atan (rx, ry)              | atan2.l    rx,ry,rz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 01   | 10101 | //// |                               | x, y and z must be even              | Atan entre longs                            |
          | atan2.f    | atan (rx, ry)              | atan2.f    fx,fy,fz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 10   | 10101 | //// |                               |                                      | Atan entre floats                           |
          | atan2.d    | atan (rx, ry)              | atan2.d    fx,fy,fz  | 11   | //// | XXXXX    | YYYYY    | ZZZZZ    | 11   | 10101 | //// |                               | x, y and z must be even              | Atan entre doubles                          |
          +------------+----------------------------+----------------------+------+------+----------+----------+----------+------+-------+------+-------------------------------+--------------------------------------+---------------------------------------------+--------------------





Invalid instructions
====================

   - Type 0   :    00-11XX-XXXXXXXXXXXXXXX-XX-XXXXX-XXXX


   - Type 1A-1:    NONE


   - Type 1A-2:    NONE


   - Type 1B  :    01-0111-XXXXXXXXXXXXXXX-XX-XXXXX-XXXX
                   01-1XXX-XXXXXXXXXXXXXXX-XX-XXXXX-XXXX


   - Type 2A  :    10-0000-XXXXXXXXXXXXXXX-1X-00010-XXXX
                   10-0000-XXXXXXXXXXXXXXX-1X-00101-XXXX
                   10-0000-XXXXXXXXXXXXXXX-1X-00110-XXXX
                   10-0000-XXXXXXXXXXXXXXX-01-00111-XXXX
                   10-0000-XXXXXXXXXXXXXXX-1X-00111-XXXX


   - Type 2B  :    NONE


   - Type 2C  :    NONE


   - Type 3   :    11-XXXX-XXXXXXXXXXXXXXX-1X-00100-XXXX
                   11-XXXX-XXXXXXXXXXXXXXX-1X-00101-XXXX
                   11-XXXX-XXXXXXXXXXXXXXX-1X-00110-XXXX
                   11-XXXX-XXXXXXXXXXXXXXX-1X-00111-XXXX
                   11-XXXX-XXXXXXXXXXXXXXX-1X-01000-XXXX
                   11-XXXX-XXXXXXXXXXXXXXX-1X-01001-XXXX
                   11-XXXX-XXXXXXXXXXXXXXX-1X-01010-XXXX
                   11-XXXX-XXXXXXXXXXXXXXX-1X-01011-XXXX
                   11-XXXX-XXXXXXXXXXXXXXX-1X-01100-XXXX
                   11-XXXX-XXXXXXXXXXXXXXX-XX-01101-XXXX
                   11-XXXX-XXXXXXXXXXXXXXX-XX-0111X-XXXX
                   11-XXXX-XXXXXXXXXXXXXXX-XX-1011X-XXXX
                   11-XXXX-XXXXXXXXXXXXXXX-XX-11XXX-XXXX
